(function(){var t=function(t,e,i,o){let n=this;void 0===o&&(o={width:$cc.ccpw(1),height:$cc.ccph(1)});let s=(o.width+2*i)/t,r=(o.height+2*i)/e;n.width=s,n.height=r,n.margin=i,n.sections=[],n.dict={},n.node_key={};for(var l=0;l<t;l++)for(var h=0;h<e;h++){let t=n.sections.length,e={left:s*l-i,bottom:r*h-i};e.right=e.left+s,e.top=e.bottom+r,n.sections[t]={idx_no:{x:l,y:h},type2:e,type1:ksttool.change_rect_type2_to_type1(e),members:{line:[]}},void 0===n.dict[l]&&(n.dict[l]={}),n.dict[l][h]=n.sections[t]}};t.prototype={get_matrix:function(t){let e=Math.floor((t.top+this.margin)/this.height),i=Math.floor((t.right+this.margin)/this.width),o=null,n=null;{let e=(t.bottom+this.margin)/this.height,i=Math.floor(e);e===i&&i>0&&i--,o=i}{let e=(t.left+this.margin)/this.width,i=Math.floor(e);e===i&&i>0&&i--,n=i}var s=[];for(let t=n;t<=i;t++)for(let i=o;i<=e;i++)this.dict[t]&&this.dict[t][i]&&(s[s.length]=this.dict[t][i].members);return s},get_section:function(t){let e=null;return e=this.get_matrix(t),e},rem_item_from_node_key:function(){},get_node_key:function(t){let e=t.getID();return void 0===this.node_key[e]&&(this.node_key[e]={}),this.node_key[e]},rem_item_from_array:function(t,e){e.sort((function(t,e){return t-e}));for(let i=e.length-1;i>-1;i--)t.splice(e[i],1)},rem_pn_from_list:function(t){if(this.node_key[t]){for(let e in this.node_key[t]){let i=this.sections[this.node_key[t][e]].members.line,o=[];for(let e=0,n=i.length;e<n;e++){let n=i[e];n.body&&n.body.getNode().getID()===t&&(o[o.length]=e)}this.rem_item_from_array(i,o)}let e=!0;for(;e;){let i=0;for(let e in this.node_key[t])delete this.node_key[t][e],i++;0===i&&(e=!1)}delete this.node_key[t]}},set_pn:function(t){var e=this;e.rem_pn_from_list(t.getNode().getID());let i=e.get_node_key(t.getNode()),o=t.getOutLine();for(let n=0;n<e.sections.length;n++){let s=e.sections[n].type2,r=e.sections[n].members,l=!1;o.forEach(e=>{ksttool.check_intersection_line_rect(e,s)&&(e.body=t,r.line.push(e),l=!0)}),l&&(i[n]=n)}},set_poly_blocks:function(t,e){var i=this;i.reset_members(),t.loop((function(t){i.set_pn(t.body)})),e||(e=cocosKst.blockGameData.util.getBoundaryInPLP()),e.forEach(t=>{for(let e=0;e<i.sections.length;e++){let o=i.sections[e].type2,n=i.sections[e].members;ksttool.check_intersection_line_rect(t,o)&&n.line.push(t)}})},reset_members:function(){this.sections.forEach(t=>{t.members.line=[]})}},this.CollideSectionManager=t,this.CollideSectionManager.CONST_VALUE="hello world"}).call(this);